from typing import Any, Iterable, Iterator, List, Mapping, Optional, Tuple

# Dummy until I figure out something better.
class Connectable:
    def execute(self, object, *multiparams, **params) -> ResultProxy: ...

class Connection(Connectable):
    def begin(self): ...

class Engine(Connectable): ...

class RowProxy(Mapping[str, Any]):
    pass

class ResultProxy(Iterator[RowProxy]):
    def keys(self) -> List[str]: ...
    def close(self) -> None: ...
    def __iter__(self) -> Iterator[RowProxy]: ...
    def fetchall(self) -> Iterator[RowProxy]: ...
    def fetchmany(self, size: int=None) -> Iterator[RowProxy]: ...
    def fetchone(self) -> Optional[RowProxy]: ...
    def first(self) -> Optional[RowProxy]: ...
    def scalar(self): ...
    @property
    def rowcount(self) -> int: ...

class Transaction:
    def commit(self): ...
    def rollback(self): ...
